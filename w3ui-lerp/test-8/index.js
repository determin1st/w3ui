// Generated by LiveScript 1.6.0
"use strict";
var slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
document.addEventListener('DOMContentLoaded', function(){
  var freeIndex, nodeMap, say, tween1, tween2;
  freeIndex = 1;
  nodeMap = {
    box: arrayFrom$(document.querySelectorAll('.box')),
    container: arrayFrom$(document.querySelectorAll('.container'))
  };
  nodeMap.projectile1 = nodeMap.box[0].querySelectorAll('.projectile')[0];
  nodeMap.projectile2 = arrayFrom$(nodeMap.box[1].querySelectorAll('.projectile'));
  say = function(){
    var text, synth, voice, selectVoice;
    text = ['Transforms ready', 'You can Drag me', 'Oh yeah, resize', 'Yes'];
    synth = window.speechSynthesis;
    voice = null;
    selectVoice = function(){
      var i$, ref$, len$, a;
      for (i$ = 0, len$ = (ref$ = synth.getVoices()).length; i$ < len$; ++i$) {
        a = ref$[i$];
        if (a.lang === 'en-US' && a.name.indexOf('Micros') === -1) {
          voice = a;
          break;
        }
      }
    };
    return function(i){
      var b, a;
      if (!synth.speaking && (b = text[i])) {
        text[i] = '';
        if (!voice) {
          selectVoice();
        }
        a = new SpeechSynthesisUtterance(b);
        a.voice = voice;
        a.pitch = 1;
        a.rate = 1;
        synth.speak(a);
      }
    };
  }();
  redsock.init();
  tween1 = redsock({
    target: nodeMap.projectile1,
    className: '!tested',
    transform: 1,
    duration: 0.8,
    ease: 'power2-out',
    onComplete: function(){
      if (this.tween[0].clas.last.includes('tested')) {
        nodeMap.container[0].classList.add('free');
        nodeMap.container[1].classList.remove('free');
        freeIndex = 0;
      } else {
        nodeMap.container[0].classList.remove('free');
        nodeMap.container[1].classList.add('free');
        freeIndex = 1;
      }
    }
  });
  tween2 = redsock({
    target: nodeMap.projectile2,
    className: '!tested',
    transform: 1,
    duration: 0.6,
    ease: 'power3-out'
  });
  nodeMap.container.forEach(function(node, index){
    var drag, size, x, y, prop, cs, pX, pY, sX, sY, rect, dragStart, dragIt, dragStop, hoverIt;
    drag = 0;
    size = 0;
    x = 0;
    y = 0;
    prop = '--n' + (index + 1) + '-';
    cs = window.getComputedStyle(nodeMap.box[0]);
    pX = parseFloat(cs.getPropertyValue(prop + 'x'));
    pY = parseFloat(cs.getPropertyValue(prop + 'y'));
    sX = parseFloat(cs.getPropertyValue(prop + 'w'));
    sY = parseFloat(cs.getPropertyValue(prop + 'h'));
    cs = nodeMap.box[0].style;
    rect = [nodeMap.box[0].clientWidth, nodeMap.box[0].clientHeight];
    dragStart = function(e){
      e.preventDefault();
      e.stopPropagation();
      if (freeIndex === index && !drag) {
        x = e.clientX;
        y = e.clientY;
        node.classList.add('drag');
        if (size) {
          drag = 2;
          say(2);
        } else {
          drag = 1;
        }
      }
    };
    dragIt = function(e){
      var a, b;
      if (drag) {
        e.preventDefault();
        e.stopPropagation();
        if (drag === 1) {
          if ((a = pX + e.clientX - x) < 0) {
            a = 0;
          } else if (a > rect[0] - sX) {
            a = rect[0] - sX;
          }
          if ((b = pY + e.clientY - y) < 0) {
            b = 0;
          } else if (b > rect[1] - sY) {
            b = rect[1] - sY;
          }
          pX = a;
          pY = b;
          cs.setProperty(prop + 'x', a + 'px');
          cs.setProperty(prop + 'y', b + 'px');
        } else {
          if (size === 1) {
            if ((a = sX + e.clientX - x) < 60) {
              a = 60;
              dragStop();
            } else if (a > rect[0] - pX) {
              a = rect[0] - pX;
              dragStop();
            }
            sX = a;
            cs.setProperty(prop + 'w', a + 'px');
          } else {
            if ((b = sY + e.clientY - y) < 60) {
              b = 60;
              dragStop();
            } else if (b > rect[1] - pY) {
              b = rect[1] - pY;
              dragStop();
            }
            sY = b;
            cs.setProperty(prop + 'h', b + 'px');
          }
        }
        x = e.clientX;
        y = e.clientY;
      }
    };
    dragStop = function(e){
      if (drag || size) {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        drag = 0;
        size = 0;
        node.classList.remove('drag', 'resizeX', 'resizeY');
      }
    };
    hoverIt = function(e){
      var a, b;
      if (freeIndex === index && !drag) {
        e.preventDefault();
        e.stopPropagation();
        a = e.offsetX;
        b = e.offsetY;
        a = a >= sX - 10 && a <= sX;
        b = b >= sY - 10 && b <= sY;
        if (a && !b) {
          if (size !== 1) {
            node.classList.add('resizeX');
            size = 1;
          }
        } else if (b && !a) {
          if (size !== 2) {
            node.classList.add('resizeY');
            size = 2;
          }
        } else if (size) {
          node.classList.remove('resizeX', 'resizeY');
          size = 0;
        } else {
          say(1);
        }
      }
    };
    node.addEventListener('pointerdown', dragStart);
    node.addEventListener('pointermove', hoverIt);
    nodeMap.box[0].addEventListener('pointermove', dragIt);
    node.addEventListener('pointerup', dragStop);
    nodeMap.box[0].addEventListener('pointerleave', dragStop);
    window.addEventListener('resize', function(){
      rect[0] = nodeMap.box[0].clientWidth;
      rect[1] = nodeMap.box[0].clientHeight;
      dragStop();
    });
  });
  nodeMap.projectile1.addEventListener('pointerenter', function(){
    say(3);
  });
  nodeMap.projectile1.addEventListener('click', function(){
    if (!tween1.active) {
      tween1.start();
    }
  });
  nodeMap.projectile2.forEach(function(node){
    node.addEventListener('click', function(){
      if (!tween2.active) {
        tween2.start();
      }
    });
  });
  setTimeout(function(){
    window.dispatchEvent(new Event('resize'));
    say(0);
  }, 1200);
});