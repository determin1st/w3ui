// Generated by LiveScript 1.5.0
"use strict";
var slice$ = [].slice;
(function(){
  var currentTween, variant, nodeMap, tween, onUpdate, onComplete, httpGet, loadCode;
  currentTween = null;
  variant = 7;
  nodeMap = {
    box: document.querySelectorAll('.box')[0],
    projectile: slice$.call(document.querySelectorAll('.projectile')),
    variant: slice$.call(document.querySelectorAll('.variant')),
    code: slice$.call(document.querySelectorAll('.code code'))
  };
  tween = [];
  onUpdate = function(){
    var d, a;
    d = this.tween[0].clas.last.indexOf('tested') === -1;
    a = 100 * this.position / this.duration;
    if (d) {
      a = 100 - a;
    }
    this.target[0].target.innerHTML = parseInt(a);
  };
  onComplete = function(){
    var a, b;
    a = nodeMap.box.classList;
    b = 'tested';
    if (a.contains(b)) {
      a.remove(b);
    } else {
      a.add(b);
    }
  };
  nodeMap.variant[variant].classList.add('selected');
  /* CODE */
  /* load stylesheet rules */
  redsock.init();
  /* create animation objects */
  /* individual */
  tween[0] = nodeMap.projectile.map(function(node){
    return redsock({
      target: node,
      duration: 0.5,
      className: '!tested',
      onUpdate: onUpdate
    });
  });
  /* chain */
  tween[1] = redsock({
    queue: tween[0],
    onComplete: onComplete
  });
  /* simultaneous */
  tween[2] = redsock({
    queue: tween[0],
    positions: 0,
    onComplete: onComplete
  });
  /* chain faster */
  tween[3] = redsock({
    clone: tween[1],
    duration: 1
  });
  /* simultaneous with ease */
  tween[4] = redsock({
    clone: tween[2],
    duration: 1,
    ease: 'power2-out-in'
  });
  /* stagger 25% */
  tween[5] = redsock({
    queue: tween[0],
    duration: 2,
    positions: 25
  });
  /* stagger 10% */
  tween[6] = redsock({
    clone: tween[5],
    positions: 10
  });
  /* all fast */
  tween[7] = redsock({
    duration: 4,
    queue: [tween[1], tween[2], tween[3], tween[4], tween[5], tween[6]]
  });
  /***/
  nodeMap.box.addEventListener('click', function(){
    var a, b;
    if (currentTween && currentTween.active) {
      return;
    }
    a = tween[variant];
    if (variant === 0) {
      b = Math.floor(Math.random() * a.length);
      a = a[b];
    }
    currentTween = a.play();
  });
  nodeMap.variant.forEach(function(node, index){
    node.addEventListener('click', function(){
      nodeMap.variant[variant].classList.remove('selected');
      nodeMap.variant[index].classList.add('selected');
      variant = index;
    });
  });
  httpGet = function(url, handler){
    var x;
    x = new window.XMLHttpRequest();
    x.overrideMimeType('text/plain');
    x.onreadystatechange = handler;
    x.open('GET', url, true);
    return x.send();
  };
  loadCode = function(url, node, onComplete){
    httpGet('index.ls', function(){
      var c, a, b;
      if (this.readyState === 4 && this.status === 200) {
        c = this.responseText;
        a = '/* CODE */';
        b = c.indexOf(a) + a.length;
        c = c.substr(b);
        a = '/***/';
        c = c.substr(0, c.indexOf(a));
        node.innerText = c;
        onComplete();
      }
    });
  };
  loadCode('index.ls', nodeMap.code[0], function(){
    hljs.initHighlighting();
  });
})();