// Generated by LiveScript 1.6.0
"use strict";
var w3ui;
w3ui = null;
w3ui = function(){
  var consoleLog, api, isModular, mutex, loader, modules, query;
  consoleLog = function(){
    var style1, style2, style3;
    style1 = 'font-weight:bold;color:palegreen';
    style2 = 'color:orangered;font-size:140%';
    style3 = 'font-size:140%';
    return function(msg, noError){
      msg = '%cw3ui: %c' + msg;
      if (noError) {
        console.log(msg, style1, style3);
      } else {
        console.log(msg, style1, style2);
      }
    };
  }();
  api = [typeof fetch, typeof Proxy, typeof WeakMap];
  if (api.includes('undefined')) {
    consoleLog('missing requirements');
    return null;
  }
  isModular = typeof w3ui === 'undefined';
  mutex = function(){
    return new Promise(function(resolve){
      resolve(null);
    });
  }();
  loader = function(m){
    return async function(list){
      var i$, len$, a, b;
      for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
        a = list[i$];
        if (b = m[a]) {
          (await b);
          continue;
        }
        if (b = window[a]) {
          m[a] = b;
          continue;
        }
        if (!(await m.load(a))) {
          return false;
        }
      }
      return true;
    };
  };
  modules = function(){
    var m;
    m = function(){};
    m.prototype = {
      load: function(name){
        var a;
        if (m[name]) {
          return m[name];
        }
        a = isModular
          ? './' + name + '.js'
          : './modules/' + name + '.js';
        return m[name] = mutex = mutex.then(async function(){
          var x;
          try {
            x = (await import(a));
            if (typeof x !== 'object') {
              consoleLog('unexpected import result');
              return null;
            }
            if (!(x = x['default'])) {
              consoleLog('incorrect import, no default');
              return null;
            }
            x = (await x);
            m[name] = x;
            if (x.isGlobal) {
              window[name] = x;
            }
          } catch (e$) {
            x = e$;
            consoleLog('failed to load "' + name + '": ' + x.message);
            x = null;
          }
          return x;
        });
      },
      unload: function(name){
        return mutex = mutex.then(function(){
          var f;
          if (!m[name]) {
            return false;
          }
          if (f = m[name].unload) {
            return mutex.then(function(){
              return f();
            });
          }
          m[name] = null;
          if (window[name]) {
            window[name] = null;
          }
          return true;
        });
      }
    };
    m = new m();
    loader = loader(m);
    return m;
  }();
  api = {
    log: consoleLog,
    load: loader,
    timeout: function(){
      var tick, cancel;
      tick = function(promise, ms, callback){
        return function(){
          if (callback && callback()) {
            promise.timer = setTimeout(tick(promise, ms, callback), ms);
          } else {
            promise.cancel();
          }
        };
      };
      cancel = function(promise){
        return function(){
          if (promise.timer) {
            clearTimeout(promise.timer);
          }
          promise.timer = 0;
          promise.pending = false;
          promise.resolve();
        };
      };
      return function(ms, callback){
        var r, p;
        r = null;
        p = new Promise(function(resolve){
          r = resolve;
        });
        p.timer = setTimeout(tick(p, ms, callback), ms);
        p.pending = true;
        p.cancel = cancel(p);
        p.resolve = r;
        return p;
      };
    }(),
    heredoc: function(f){
      var a, b;
      if (!(typeof f === 'function')) {
        return '';
      }
      f = f.toString();
      a = f.indexOf('/*');
      b = f.lastIndexOf('*/');
      return f.substring(a + 2, b - 1).trim();
    },
    createElement: function(){
      var temp;
      temp = document.createElement('template');
      return function(html){
        temp.innerHTML = html;
        return temp.content.firstChild;
      };
    }(),
    state: function(){
      return null;
    }()
  };
  query = function(s){
    return s;
  };
  return window.w3ui = new Proxy(query, {
    get: function(q, k){
      switch (k) {
      case 'then':
        return null;
      case 'unload':
        return null;
      }
      if (api[k]) {
        return api[k];
      }
      if (modules[k]) {
        return modules[k];
      }
      return modules.load(k);
    },
    set: function(q, k, v){
      switch (k) {
      case 'load':
      case 'unload':
        return true;
      }
      if (!v) {
        module.unload(k);
        return true;
      }
      if (module[k]) {
        module.unload(k);
      }
      modules[k] = v;
      return true;
    }
  });
}();