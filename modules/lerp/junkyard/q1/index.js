// Generated by LiveScript 1.5.0
"use strict";
var slice$ = [].slice;
(function(){
  var hotspots, activeHotspot, hotspotCirles, hotspotCopies, body, showTl, hideTl, onTl, outTl, spotClick, bodyClick, spotEnter, spotLeave, i$, len$, index, spot;
  hotspots = document.querySelectorAll('.hotspot');
  hotspots = slice$.call(hotspots);
  activeHotspot = -1;
  hotspotCirles = function(){
    var res, i$, ref$, len$, spot;
    res = [];
    for (i$ = 0, len$ = (ref$ = hotspots).length; i$ < len$; ++i$) {
      spot = ref$[i$];
      res.push(spot.querySelectorAll('.circle')[0]);
    }
    return res;
  }();
  hotspotCopies = function(){
    var res, i$, ref$, len$, spot;
    res = [];
    for (i$ = 0, len$ = (ref$ = hotspots).length; i$ < len$; ++i$) {
      spot = ref$[i$];
      res.push(spot.querySelectorAll('.copy')[0]);
    }
    return res;
  }();
  body = document.querySelector('body');
  showTl = function(){
    var res, i$, ref$, len$, index, spot, a;
    res = [];
    for (i$ = 0, len$ = (ref$ = hotspots).length; i$ < len$; ++i$) {
      index = i$;
      spot = ref$[i$];
      a = new TimelineMax({
        paused: true
      });
      a.to(hotspotCirles[index], 0.1, {
        autoAlpha: 0
      });
      a.to(spot, 0.5, {
        width: 280,
        borderRadius: 20,
        backgroundColor: "hsla(0,0%,9%,.8)"
      });
      a.to(hotspotCopies[index], 0.2, {
        autoAlpha: 1,
        ease: Power2.easeIn
      });
      res[index] = a;
    }
    return res;
  }();
  hideTl = function(){
    var res, i$, ref$, len$, index, spot, a;
    res = [];
    for (i$ = 0, len$ = (ref$ = hotspots).length; i$ < len$; ++i$) {
      index = i$;
      spot = ref$[i$];
      a = new TimelineMax({
        paused: true
      });
      a.to(hotspotCopies[index], 0.2, {
        autoAlpha: 0,
        ease: Power2.easeIn
      });
      a.to(spot, 0.5, {
        width: 120,
        borderRadius: 100,
        backgroundColor: "gray"
      });
      a.to(hotspotCirles[index], 0.3, {
        autoAlpha: 1,
        scaleX: 1,
        scaleY: 1
      });
      res[index] = a;
    }
    return res;
  }();
  onTl = function(){
    var res, i$, ref$, len$, index, spot, a;
    res = [];
    for (i$ = 0, len$ = (ref$ = hotspots).length; i$ < len$; ++i$) {
      index = i$;
      spot = ref$[i$];
      a = new TimelineMax({
        paused: true
      });
      a.to(spot, 0.5, {
        backgroundColor: "pink"
      });
      a.to(hotspotCirles[index], 0.5, {
        scaleX: 1.1,
        scaleY: 1.1
      }, 0);
      res[index] = a;
    }
    return res;
  }();
  outTl = function(){
    var res, i$, ref$, len$, index, spot, a;
    res = [];
    for (i$ = 0, len$ = (ref$ = hotspots).length; i$ < len$; ++i$) {
      index = i$;
      spot = ref$[i$];
      a = new TimelineMax({
        paused: true
      });
      a.to(spot, 0.5, {
        backgroundColor: "gray"
      });
      a.to(hotspotCirles[index], 0.5, {
        scaleX: 1,
        scaleY: 1
      }, 0);
      res[index] = a;
    }
    return res;
  }();
  spotClick = function(index){
    return function(e){
      e.stopPropagation();
      if (activeHotspot >= 0 && activeHotspot !== index) {
        showTl[activeHotspot].kill();
        hideTl[activeHotspot].invalidate().play(0);
      }
      hideTl[index].kill();
      showTl[index].invalidate().play(0);
      activeHotspot = index;
    };
  };
  bodyClick = function(e){
    e.stopPropagation();
    if (activeHotspot >= 0) {
      showTl[activeHotspot].kill();
      hideTl[activeHotspot].invalidate().play(0);
      activeHotspot = -1;
    }
  };
  spotEnter = function(index){
    return function(e){
      if (index !== activeHotspot) {
        outTl[index].kill();
        onTl[index].invalidate().play(0);
      }
    };
  };
  spotLeave = function(index){
    return function(e){
      if (index !== activeHotspot) {
        onTl[index].kill();
        outTl[index].invalidate().play(0);
      }
    };
  };
  body.addEventListener('click', bodyClick);
  for (i$ = 0, len$ = hotspots.length; i$ < len$; ++i$) {
    index = i$;
    spot = hotspots[i$];
    spot.addEventListener('click', spotClick(index));
    spot.addEventListener('mouseenter', spotEnter(index));
    spot.addEventListener('mouseleave', spotLeave(index));
  }
})();