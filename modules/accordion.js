// Generated by LiveScript 1.5.0
"use strict";
w3ui && (w3ui.accordion = {
  options: {
    ORDER: ['panels', 'multiSelect', 'deactivation'],
    multiSelect: false,
    deepDive: 3,
    deactivation: true,
    deactivateChildren: true,
    contentBoxFirst: false,
    extraHover: false,
    extraActive: false,
    events: {
      hover: null,
      unhover: null,
      select: null,
      selectComplete: null
    },
    panels: null
  },
  data: {
    INIT: ['panels'],
    animation: {
      hover: [
        {
          duration: 0.4,
          className: '+hovered',
          ease: 'power2-out'
        }, {
          position: 0,
          duration: 0.4,
          className: '+hovered',
          ease: 'power2-out'
        }, {
          position: 0,
          duration: 0.6,
          className: '+hovered',
          ease: 'power2-out'
        }
      ],
      unhover: [
        {
          duration: 0.4,
          className: '-hovered',
          ease: 'Power2.easeIn'
        }, {
          position: 0,
          duration: 0.4,
          className: '-hovered',
          ease: 'Power2.easeIn'
        }, {
          position: 0,
          duration: 0.4,
          className: '-hovered',
          ease: 'Power2.easeIn'
        }
      ],
      resize: [{
        duration: 0.4,
        css: {},
        ease: 'Power2.easeInOut'
      }],
      activate: [
        {
          duration: 0,
          css: {}
        }, {
          duration: 0.2,
          className: '+active',
          ease: 'Power2.easeIn'
        }, {
          duration: 0.4,
          className: '+active',
          ease: 'Power1.easeOut'
        }, {
          position: '-=0.3',
          duration: 0.2,
          className: '+active',
          ease: 'Power2.easeIn'
        }
      ],
      deactivate: [
        {
          duration: 0.3,
          className: '-active',
          ease: 'Power2.easeIn'
        }, {
          position: '-=0.3',
          duration: 0.4,
          className: '-active',
          ease: 'Power1.easeIn'
        }, {
          duration: 0.2,
          className: '-active',
          ease: 'Power2.easeOut'
        }
      ],
      enlarge: [{
        duration: 0.4,
        css: {},
        ease: 'Power2.easeOut'
      }],
      shrink: [{
        duration: 0.4,
        css: {},
        ease: 'Power1.easeIn'
      }],
      show: [
        {
          duration: 0.1,
          className: '-hidden',
          ease: 'Power1.easeOut'
        }, {
          duration: 0.3,
          className: '-hidden',
          ease: 'Power1.easeOut'
        }
      ],
      hide: [
        {
          duration: 0.3,
          className: '+hidden',
          ease: 'Power1.easeIn'
        }, {
          duration: 0.1,
          className: '+hidden',
          ease: 'Power1.easeIn'
        }
      ],
      diveOut: [
        {
          label: 'D0',
          duration: 4,
          className: '-deepDive',
          ease: 'Power1.easeOut'
        }, {
          position: 'D0',
          duration: 4,
          className: '-hidden',
          ease: 'Power1.easeOut'
        }, {
          position: 'D0+=2',
          duration: 4,
          className: '-deepDive',
          ease: 'Power1.easeOut'
        }
      ],
      diveIn: [
        {
          duration: 30,
          className: '+hidden',
          ease: 'Power1.easeIn'
        }, {
          duration: 30,
          className: '+hidden',
          ease: 'Power1.easeIn'
        }, {
          duration: 30,
          className: '+deepDive',
          ease: 'Power1.easeIn'
        }
      ]
    },
    events: [
      {
        id: 'hover',
        event: 'pointerenter',
        el: '.title'
      }, {
        id: 'unhover',
        event: 'pointerleave',
        el: '.title'
      }, {
        id: 'select',
        event: 'click',
        el: '.title'
      }
    ]
  },
  api: {
    none: true
  },
  create: function(){
    if (!this.panels.create()) {
      this.log('failed to create panels');
      return false;
    }
    return true;
  },
  resize: function(){
    var a;
    if (a = this.panels.resize()) {
      a.progress(1);
    }
  },
  setup: function(name, opt){
    switch (name) {
    case 'panels':
      this.panels = opt;
    }
    return opt;
  },
  animation: function(name){
    switch (name) {
    case 'resize':
      return this.panels.resize();
    }
    return null;
  },
  react: function(data, event){
    var id, a, b;
    switch (id = data.id) {
    case 'hover':
    case 'unhover':
      a = event.currentTarget.dataset.id;
      b = id === 'hover';
      this.panels.hover(a, b);
      break;
    case 'select':
      if (a = event.currentTarget.dataset.id) {
        this.panels.select(a);
      }
      break;
    default:
      return false;
    }
    return true;
  },
  panels: function(){
    var initData, initGroupSize, initPanelSize, initAnimations, createNodes, getItem, getItemList, getAnimation, createHoverAnimation, stopHoverAnimation, createResizeAnimation, createRefreshAnimation;
    initData = function(data, parent){
      var i$, len$, index, el;
      parent == null && (parent = null);
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        index = i$;
        el = data[i$];
        el.state = w3ui.STATE(el);
        el.parent = parent;
        el.index = index;
        el.level = parent ? parent.level + 1 : 0;
        el.animation = {};
        el.firstElement = index === 0;
        el.lastElement = index === data.length - 1;
        el.panelSize = 0;
        if (!el.id) {
          el.id = el.level + '#' + index;
        }
        el.hidden = !!el.hidden;
        el.hiddenTitle = !!el.hiddenTitle;
        el.active = !!el.active;
        el.dived = !!el.dived;
        el.disabled = !!el.disabled;
        if (el.panels) {
          el.panels.deepDive = 'deepDive' in el
            ? el.deepDive
            : data.deepDive;
          if (!initData(el.panels, el)) {
            return false;
          }
        }
      }
      return true;
    };
    initGroupSize = function(data, parent){
      var a, i$, len$, el, b, c;
      a = data[0].node[0].box;
      a = a.borderHeight + a.paddingHeight;
      data.titleGap = a;
      a = 0;
      if (data.length > 1) {
        for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
          el = data[i$];
          b = el.nodePanel.box;
          a = a + b.borderHeight + b.paddingHeight;
        }
      }
      data.panelsGap = a;
      a = 0;
      if (parent) {
        b = parent.nodeContent[1].box;
        a = b.borderHeight + b.paddingHeight;
      }
      data.boxGap = a;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        a = data[i$];
        b = a.nodeContent;
        c = ['content' in a, 'panels' in a, 'contentEnd' in a];
        a.contentSize = c[0] ? parseInt(b[0].style.contentSize) : 0;
        a.contentEndSize = c[2] ? parseInt(b[2].style.contentSize) : 0;
        if (c[1]) {
          initGroupSize(a.panels, a);
        }
      }
    };
    initPanelSize = function(data, parentData){
      var lst0, lst1, i$, len$, el, c, b, a;
      parentData == null && (parentData = data);
      lst0 = [];
      lst1 = [];
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (!el.hidden) {
          if (!el.dived) {
            lst0.push(el);
          }
          if (el.active) {
            lst1.push(el);
          }
        }
      }
      c = data.boxSize;
      if (lst0.length) {
        c = c - data.titleSize * lst0.length;
        if (lst0.length > 1) {
          c = c - data.panelsGap;
        }
      }
      if (c < 0) {
        c = 0;
      }
      if (b = lst1.length) {
        a = 0;
        for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
          el = lst1[i$];
          if (el.size) {
            el.state.panelSize = el.size * c / 100.0;
          } else {
            el.state.panelSize = c / b;
          }
          a = a + el.panelSize;
        }
        a = c - a;
        if (Math.abs(a) > 0.001) {
          a = a / b;
          for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
            el = lst1[i$];
            el.state.panelSize = el.panelSize + a;
          }
          a = 0;
          for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
            el = lst1[i$];
            if (el.panelSize < 0) {
              a = a + el.panelSize;
              el.state.panelSize = 0;
            }
          }
          if (a < 0) {
            c = [];
            for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
              el = lst1[i$];
              if (el.panelSize > 0) {
                c.push(el);
              }
            }
            a = a / c.length;
            for (i$ = 0, len$ = c.length; i$ < len$; ++i$) {
              el = c[i$];
              el.state.panelSize = el.panelSize + a;
            }
          }
        }
      }
      for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
        el = lst1[i$];
        if (a = el.panels) {
          if (el.dived) {
            a.boxSize = el.panelSize;
          } else if (el.contentSize || el.contentEndSize) {
            b = 100 - el.contentSize - el.contentEndSize;
            b = el.panelSize * b / 100.0;
            a.boxSize = b - a.boxGap;
          } else {
            a.boxSize = el.panelSize - a.boxGap;
          }
          b = parentData.titleSize;
          if (b * lst0.length > el.panelSize) {
            if ((b = el.panelSize / lst0.length) < 1) {
              b = 0;
            }
          }
          a.titleSize = b;
          b = parentData.titleFontSize;
          if ((c = a.titleSize - parentData.titleGap) > 0) {
            if (b > c) {
              b = c;
            }
          } else {
            b = 0;
          }
          a.titleFontSize = b;
        }
      }
      for (i$ = 0, len$ = lst1.length; i$ < len$; ++i$) {
        el = lst1[i$];
        if (el.panels) {
          initPanelSize(el.panels, data);
        }
      }
    };
    initAnimations = function(data, animation){
      var i$, len$, el, a, b;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        for (a in animation) {
          b = animation[a];
          el.animation[a] = getAnimation(el, a, animation);
        }
        el.animation.hovering = new TimelineLite({});
        if (el.panels) {
          initAnimations(el.panels, animation);
        }
      }
    };
    createNodes = function(data, opts, box){
      var list, i$, len$, index, el, a, b;
      list = [];
      if (!box) {
        box = w3ui(document.createElement('div'));
        box['class'].add('box');
      }
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        index = i$;
        el = data[i$];
        if (!el.hidden) {
          list.push(el);
        }
        a = Array(11).fill(0).map(fn$);
        el.nodeParent = box;
        el.nodePanel = w3ui(a[0]);
        el.nodeBox = w3ui([a[1], a[2]]);
        el.node = w3ui([a[3], a[4]]);
        el.nodeTitle = w3ui([a[5], a[6], a[7]]);
        el.nodeContent = w3ui([a[8], a[9], a[10]]);
        el.nodes = w3ui(a);
        el.node[0].child.add(el.nodeTitle);
        el.node[1].child.add(el.nodeContent);
        el.nodeBox[0].child.add(el.node[0]);
        el.nodeBox[1].child.add(el.node[1]);
        if (el.contentBoxFirst || opts.contentBoxFirst) {
          el.nodePanel.child.add(el.nodeBox[1]);
          el.nodePanel.child.add(el.nodeBox[0]);
        } else {
          el.nodePanel.child.add(el.nodeBox);
        }
        box.child.add(el.nodePanel);
        el.nodePanel['class'] = 'panel';
        el.nodeBox[0]['class'] = 'titleSizer';
        el.nodeBox[1]['class'] = 'contentSizer';
        el.node[0]['class'] = 'title';
        el.node[1]['class'] = 'content';
        el.nodeTitle.forEach(fn1$);
        el.nodeContent.classAdd('box');
        if (el.hidden) {
          el.nodePanel['class'].add('hidden');
          el.active = false;
        }
        if (el.active) {
          el.nodes.classAdd('active');
        }
        if (el.disabled) {
          el.nodes.classAdd('disabled');
        }
        el.nodes.props.dataId = el.id;
        a = el.level % 2 === 0 ? 'EVEN' : 'ODD';
        el.nodes.classAdd(a);
        a = el.contentBoxFirst || opts.contentBoxFirst ? 'ORDER_B' : 'ORDER_A';
        el.node.classAdd(a);
        if (el.firstElement) {
          a = 'FIRST';
          el.nodePanel['class'].add(a);
          el.node.classAdd(a);
        }
        if (el.lastElement) {
          a = 'LAST';
          el.nodePanel['class'].add(a);
          el.node.classAdd(a);
        }
        if (data.deepDive) {
          el.nodePanel['class'].add('deepDive');
        }
        a = el.nodeContent;
        b = ['content' in el, 'panels' in el, 'contentEnd' in el];
        if (b[0]) {
          a[0]['class'].add('A');
          if (b[1] || b[2]) {
            a[0]['class'].add('FIRST');
          } else {
            a[0]['class'].add('SINGLE');
          }
        }
        if (b[1]) {
          a[1]['class'].add('B');
          if (!b[0] && !b[2]) {
            a[1]['class'].add('SINGLE');
          } else {
            if (!b[0]) {
              a[1]['class'].add('FIRST');
            }
            if (!b[2]) {
              a[1]['class'].add('LAST');
            }
          }
        }
        if (b[2]) {
          a[2]['class'].add('A');
          if (b[0] || b[1]) {
            a[2]['class'].add('LAST');
          } else {
            a[2]['class'].add('SINGLE');
          }
        }
        if (el.title) {
          el.nodeTitle[1].html = el.title;
        }
        a = el.nodeContent;
        if ('content' in el) {
          a[0].html = el.content;
        }
        if ('contentEnd' in el) {
          a[2].html = el.contentEnd;
        }
        if (el.panels) {
          createNodes(el.panels, opts, el.nodeContent[1]);
        }
      }
      box['class'].add('L' + data[0].level);
      function fn$(){
        return document.createElement('div');
      }
      function fn1$(el, index){
        el['class'] = 'box N' + index;
      }
    };
    getItem = function(id, data){
      var i$, len$, el, a;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (el.id === id) {
          return el;
        }
      }
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (el.panels) {
          if (a = getItem(id, el.panels)) {
            return a;
          }
        }
      }
      return null;
    };
    getItemList = function(data){
      var list, i$, len$, a;
      if (!data) {
        return [];
      }
      list = data;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        a = data[i$];
        if (a.panels) {
          list = list.concat(getItemList(a.panels));
        }
      }
      return list;
    };
    getAnimation = function(el, animName, animData){
      var a;
      a = w3ui.CLONE(animData[animName]);
      switch (animName) {
      case 'hover':
      case 'unhover':
        a[0].node = el.nodeTitle.nodes;
        a[1].node = el.nodeContent.nodes;
        a[2].node = el.node.nodes.concat(el.nodePanel.nodes);
        a = w3ui.GSAP.queue(a);
        break;
      case 'activate':
        a[0].node = el.nodeBox[1].node;
        a[1].node = el.nodeBox[0].nodes.concat(el.node.nodes, el.nodeTitle.nodes);
        a[2].node = [el.nodeBox[1].node, el.nodePanel.node];
        a[3].node = el.nodeContent.nodes;
        break;
      case 'deactivate':
        a[0].node = el.nodeContent.nodes;
        a[1].node = [el.nodeBox[1].node, el.nodePanel.node];
        a[2].node = el.nodeBox[0].nodes.concat(el.node.nodes, el.nodeTitle.nodes);
        break;
      case 'resize':
      case 'enlarge':
      case 'shrink':
        a[0].node = el.nodeBox[1].node;
        break;
      case 'show':
        a[0].node = el.nodePanel.node;
        a[1].node = [el.nodeBox[0].node, el.node[0].node];
        break;
      case 'hide':
        a[0].node = [el.nodeBox[0].node, el.node[0].node];
        a[1].node = el.nodePanel.node;
        break;
      case 'diveOut':
        a[0].node = el.nodePanel.node;
        a[1].node = el.nodeBox.nodes.concat(el.node.nodes);
        a[2].node = el.nodeContent.nodes;
        break;
      case 'diveIn':
        a[0].node = el.nodeBox.nodes.concat(el.node.nodes);
        a[1].node = el.nodeContent.nodes;
      }
      return a;
    };
    createHoverAnimation = function(data){
      var b, i$, len$, el, a;
      if (!data || !data.length) {
        return null;
      }
      b = [];
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (el.hovered === el.nodePanel['class'].has('hovered')) {
          continue;
        }
        a = el.hovered
          ? el.animation.hover
          : el.animation.unhover;
        b.push(a.invalidate());
      }
      if (!b.length) {
        return null;
      }
      a = new TimelineLite({
        paused: true
      });
      for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
        el = b[i$];
        a.add(el.play(), 0);
      }
      return a;
    };
    stopHoverAnimation = function(data){
      var i$, len$, el, a;
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        a = el.animation;
        if (a.hovering.isActive()) {
          a.hovering.progress(1);
        }
      }
    };
    createResizeAnimation = function(data){
      var anim, animFirstClass, a, i$, len$, el, b, c;
      anim = [];
      animFirstClass = [];
      a = [];
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (el.state.panelSize) {
          if (el.panelSize - el.state.$panelSize > 0) {
            b = el.animation.enlarge;
          } else {
            b = el.animation.shrink;
            animFirstClass.push(el.id);
          }
          c = {};
          c['--panel-size'] = el.panelSize + 'px';
          if (el.panels) {
            c['--title-size'] = data.titleSize + 'px';
            c['--title-font-size'] = data.titleFontSize + 'px';
          }
          b[0].to.css = c;
          a.push(w3ui.GSAP.queue(b));
        }
      }
      if (a = w3ui.GSAP.joinTimelines(a)) {
        anim.push(a);
      }
      a = [];
      b = [];
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (el.panels) {
          if (c = createResizeAnimation(el.panels)) {
            if (animFirstClass.indexOf(el.id) < 0) {
              b.push(c);
            } else {
              a.push(c);
            }
          }
        }
      }
      if (a = w3ui.GSAP.joinTimelines(a)) {
        anim.unshift(a);
      }
      if (b = w3ui.GSAP.joinTimelines(b)) {
        anim.push(b);
      }
      if (!anim.length) {
        return null;
      }
      if (anim.length < 2) {
        return anim[0];
      }
      return w3ui.GSAP.joinTimelines(anim, true);
    };
    createRefreshAnimation = function(data){
      var anim, animFirstClass, a, b, i$, len$, el, d, c, e;
      anim = [];
      animFirstClass = [];
      stopHoverAnimation(data);
      a = [];
      b = [];
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        d = [el.state.hidden, el.state.active, el.state.dived, el.state.panelSize];
        if (d[0]) {
          c = el.hidden
            ? el.animation.hide
            : el.animation.show;
          a.push(w3ui.GSAP.queue(c));
        }
        if (d[1]) {
          if (el.active) {
            c = el.animation.activate;
            c[0].to.css['--panel-size'] = el.panelSize + 'px';
          } else {
            c = el.animation.deactivate;
            animFirstClass.push(el.id);
          }
          a.push(w3ui.GSAP.queue(c));
        }
        if (d[2]) {
          c = el.dived
            ? el.animation.diveIn
            : el.animation.diveOut;
          a.push(w3ui.GSAP.queue(c));
          animFirstClass.push(el.id);
        }
        if (d[3] && (!d[2] || !el.dived)) {
          if (el.panelSize - el.state.$panelSize > 0) {
            c = el.animation.enlarge;
          } else {
            c = el.animation.shrink;
            animFirstClass.push(el.id);
          }
          e = {};
          if (!d[0] || !el.active) {
            e['--panel-size'] = el.panelSize + 'px';
          }
          if (el.panels) {
            e['--title-size'] = data.titleSize + 'px';
            e['--title-font-size'] = data.titleFontSize + 'px';
          }
          if (Object.keys(e).length) {
            c[0].to.css = e;
            a.push(w3ui.GSAP.queue(c));
          }
        }
      }
      if (a = w3ui.GSAP.joinTimelines(a)) {
        anim.push(a);
      }
      if (b = w3ui.GSAP.joinTimelines(b)) {
        anim.push(b);
      }
      a = [];
      b = [];
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        el = data[i$];
        if (el.panels) {
          if (c = createRefreshAnimation(el.panels)) {
            if (animFirstClass.indexOf(el.id) < 0) {
              b.push(c);
            } else {
              a.push(c);
            }
          }
        }
      }
      if (a = w3ui.GSAP.joinTimelines(a)) {
        anim.unshift(a);
      }
      if (b = w3ui.GSAP.joinTimelines(b)) {
        anim.push(b);
      }
      if (!anim.length) {
        return null;
      }
      if (anim.length < 2) {
        return anim[0];
      }
      return w3ui.GSAP.joinTimelines(anim, true);
    };
    return function(){
      var DATA, create, destroy, resize, hover, select, stopSelect, this$ = this;
      DATA = [];
      create = function(){
        if (!DATA.length) {
          return true;
        }
        createNodes(DATA, this$.options);
        initAnimations(DATA, this$.data.animation);
        this$.node.child.add(DATA[0].nodeParent);
        return true;
      };
      destroy = function(){
        if (DATA.length) {
          this$.node.child.remove(DATA[0].nodeParent);
          DATA.length = 0;
          delete DATA.sizes;
        }
      };
      resize = function(){
        var a, b;
        initGroupSize(DATA);
        a = DATA[0].nodeParent.box.innerHeight;
        DATA.boxSize = a < 1 ? 0 : a;
        if ((a = this$.node.style.titleFontSize) === 0) {
          a = this$.node.style.fontSize;
        } else if (typeof a === 'string') {
          b = DATA[0].nodeTitle[1].style;
          b.fontSize = a;
          a = b.fontSize;
          b.fontSize = null;
        }
        DATA.titleFontSize = a;
        if ((a = this$.node.style.titleSize) === 0) {
          a = DATA.titleFontSize + DATA.titleGap;
        } else if (typeof b === 'string') {
          b = DATA[0].nodeTitle[1].style;
          b.height = a;
          a = b.height;
          b.height = null;
        }
        DATA.titleSize = a;
        a = DATA.boxSize - DATA.panelsGap;
        if (a < DATA.titleSize * DATA.length) {
          DATA.titleSize = a / DATA.length;
        }
        a = DATA.titleSize - DATA.titleGap;
        if (DATA.titleFontSize > a) {
          DATA.titleFontSize = a;
        }
        initPanelSize(DATA);
        b = this$.data.animation.resize;
        b[0].to.css = {
          '--title-size': DATA.titleSize + 'px',
          '--title-font-size': DATA.titleFontSize + 'px'
        };
        b = w3ui.GSAP.queue(b, DATA[0].nodeParent.node);
        if (!(a = createResizeAnimation(DATA))) {
          return b;
        }
        a.add(b.play(), 0);
        return a;
      };
      hover = function(id, state){
        var panel, a, b;
        if (!(panel = getItem(id, DATA))) {
          return;
        }
        if (panel.disabled || state === panel.hovered) {
          return;
        }
        panel.hovered = state;
        if (DATA.selecting) {
          if (!DATA.hovering) {
            DATA.hovering = [];
          }
          DATA.hovering.push(panel);
        } else {
          a = panel.animation;
          b = panel.hovered
            ? a.hover
            : a.unhover;
          a.hovering.kill().clear();
          a.hovering.add(b.invalidate().play());
        }
        /***
        # TODO
        # additional animation
        if @options.hoverMore
            # get adjacent panels
            panel = if panel.parent
                then panel.parent.panels
                else DATA
            # iterate
            for el in panel when not el.hidden and not el.disabled
                a = el.animation
                b = el.hovered
                # stop animation
                a.hover.kill!
                a.unhover.kill!
                # get target animation
                c = if b
                    then a.hover
                    else a.unhover
                # animate
                c.invalidate.play 0
        /***/
      };
      select = function(id){
        var panel, a, i$, ref$, len$, b, j$, len1$;
        if (!(panel = getItem(id, DATA))) {
          return;
        }
        if (panel.disabled || (!this$.options.multiSelect && panel.active && !this$.options.deactivation)) {
          return;
        }
        if (a = DATA.selecting) {
          if (a === true) {
            return;
          }
          a.progress(1);
          stopSelect(true);
        }
        DATA.selecting = true;
        if (panel.active) {
          panel.state.active = false;
          a = panel.parent ? panel.parent.panels : DATA;
          if (this$.options.deactivateChildren && panel.panels) {
            for (i$ = 0, len$ = (ref$ = getItemList(panel.panels)).length; i$ < len$; ++i$) {
              b = ref$[i$];
              b.state.active = false;
              b.state.dived = false;
            }
          }
          if (a.deepDive) {
            for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
              b = a[i$];
              b.state.hidden = false;
            }
            if (a.deepDive > 1 && (b = panel.parent)) {
              b.state.dived = false;
              if (a.deepDive < 3 && (b = b.parent)) {
                b.state.dived = false;
              }
            }
          }
        } else {
          panel.state.active = true;
          a = panel.parent ? panel.parent.panels : DATA;
          if (!this$.options.multiSelect) {
            for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
              b = a[i$];
              if (b.active && b !== panel) {
                b.state.active = false;
                if (b.panels && this$.options.deactivateChildren) {
                  for (j$ = 0, len1$ = (ref$ = getItemList(b.panels)).length; j$ < len1$; ++j$) {
                    b = ref$[j$];
                    b.state.active = false;
                  }
                }
              }
            }
            if (a.deepDive) {
              for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
                b = a[i$];
                if (b !== panel) {
                  b.state.hidden = true;
                }
              }
              if (a.deepDive > 1 && (b = panel.parent)) {
                if (a.deepDive > 2) {
                  do {
                    b.state.dived = true;
                  } while (b = b.parent);
                } else if (a.parent) {
                  a.parent.state.dived = true;
                }
              }
            }
          }
        }
        initPanelSize(DATA);
        if (!(a = createRefreshAnimation(DATA))) {
          DATA.selecting = false;
          return;
        }
        a.add(stopSelect);
        DATA.selecting = a.play();
      };
      stopSelect = function(forced){
        var list, a;
        if (list = DATA.hovering) {
          if (forced && (a = list.animation)) {
            a.progress(1);
            delete list.animation;
          } else if (list.length && (a = createHoverAnimation(list))) {
            list.length = 0;
            a.add(stopSelect);
            list.animation = a;
            a.play();
            return;
          } else if (list.animation) {
            delete list.animation;
          }
        }
        DATA.selecting = false;
      };
      Object.defineProperty(this, 'panels', {
        set: function(data){
          DATA.length = 0;
          if (data) {
            data.deepDive = this.options.deepDive;
            if (initData(data)) {
              DATA = data;
            }
          }
        },
        get: function(){
          var api;
          api = w3ui.PROXY({
            create: create,
            destroy: destroy,
            resize: resize,
            hover: hover,
            select: select
          }, {
            get: function(api, key){
              if (key in api) {
                return api[key];
              }
              return key ? getItem(key, DATA) : DATA;
            }
          });
          return function(){
            return api;
          };
        }()
      });
    };
  }()
});