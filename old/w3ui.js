// Generated by LiveScript 1.5.0
"use strict";
/* web 3.0 user interface */
var w3ui, toString$ = {}.toString;
w3ui = function(){
  var DEP, CLONE, PROXY, THREAD, STATE, GSAP, WIDGET, QUERY, APP;
  DEP = [[Object.entries, "ECMAScript® 2018"], [window.requestAnimationFrame, "WHATWG HTML Living Standard"], [document.body.offsetLeft !== undefined, "CSSOM View Module 2016"], [!!redsock, "redsock animation library"]];
  DEP = function(){
    var b, i$, ref$, len$, a;
    b = true;
    for (i$ = 0, len$ = (ref$ = DEP).length; i$ < len$; ++i$) {
      a = ref$[i$];
      if (!a[0]) {
        b = false;
        console.log("w3ui requires " + a[1]);
      }
    }
    return b;
  }();
  if (!DEP) {
    return null;
  }
  CLONE = function(obj, trace){
    var i$, len$, ref$, a, b, c, own$ = {}.hasOwnProperty;
    trace == null && (trace = []);
    switch (toString$.call(obj).slice(8, -1)) {
    case 'Date':
      return new Date(obj.getTime());
    case 'RegExp':
      return new RegExp(obj);
    case 'Object':
      if (Object.prototype !== Object.getPrototypeOf(obj)) {
        return obj;
      }
      for (i$ = 0, len$ = trace.length; i$ < len$; ++i$) {
        ref$ = trace[i$], a = ref$[0], b = ref$[1];
        if (obj === a) {
          return b;
        }
      }
      c = {};
      for (a in obj) if (own$.call(obj, a)) {
        b = obj[a];
        c[a] = CLONE(b, trace);
      }
      trace.push([obj, c]);
      obj = c;
      break;
    case 'Array':
      for (i$ = 0, len$ = trace.length; i$ < len$; ++i$) {
        ref$ = trace[i$], a = ref$[0], b = ref$[1];
        if (obj === a) {
          return b;
        }
      }
      c = obj.map(function(a){
        return CLONE(a, trace);
      });
      for (a in obj) if (own$.call(obj, a)) {
        b = obj[a];
        c[a] = CLONE(b, trace);
      }
      trace.push([obj, c]);
      obj = c;
      break;
    default:

    }
    return obj;
  };
  PROXY = function(){
    var prx, setDefault, getDefault;
    prx = {
      set: function(obj, key, val, prx){
        if (typeof key !== 'string') {
          return true;
        }
        if (key[0] === '$') {
          if (key === '$scope') {
            prx = obj.$handler;
            if (prx.set) {
              obj.$set = prx.set.bind(val);
            }
            if (prx.get) {
              obj.$get = prx.get.bind(val);
            }
          }
          obj[key] = val;
          return true;
        }
        return obj.$set(obj.$data, key, val, prx);
      },
      get: function(obj, key, prx){
        if (typeof key !== 'string') {
          return false;
        }
        if (key[0] === '$') {
          return obj[key];
        }
        return obj.$get(obj.$data, key, prx);
      }
    };
    setDefault = function(obj, key, val){
      obj.$data[key] = val;
      return true;
    };
    getDefault = function(obj, key){
      return obj.$data[key];
    };
    return function(obj, handler, scope){
      var a;
      scope == null && (scope = obj);
      a = handler.init ? handler.init(obj) : obj;
      a = {
        $data: a,
        $handler: handler,
        $scope: scope,
        $clone: function(obj){
          return PROXY(obj, handler);
        },
        $set: handler.set ? handler.set.bind(scope) : setDefault,
        $get: handler.get ? handler.get.bind(scope) : getDefault
      };
      return new Proxy(a, prx);
    };
  }();
  THREAD = function(chain){
    var index, func;
    index = 0;
    func = function(){
      window.requestAnimationFrame(function(){
        switch (chain[index]()) {
        case false:
          func();
          break;
        case true:
        case undefined:
          if (chain[++index]) {
            func();
          }
        }
        return;
      });
    };
    func();
  };
  STATE = function(){
    var checker, handler;
    checker = {
      boolean: function(data, key, val){
        return data[key] !== val;
      },
      string: function(data, key, val){
        return data[key] !== val;
      },
      number: function(data, key, val){
        if (key in data) {
          if (Math.abs(data[key] - val) < 0.000001) {
            return false;
          }
        }
        return true;
      }
    };
    handler = {
      set: function(store, key, val){
        if (checker[typeof val](store.data, key, val)) {
          store['$' + key] = store.data[key];
          store.dirty[key] = true;
          store.data[key] = val;
        }
        return true;
      },
      get: function(store, key){
        if (key[0] === '$') {
          if (key in store) {
            return store[key];
          }
          return store.data[key.slice(1)];
        }
        if (!store.dirty[key]) {
          return false;
        }
        store.dirty[key] = false;
        return true;
      }
    };
    return function(data){
      return new Proxy({
        data: data,
        dirty: {}
      }, handler);
    };
  }();
  GSAP = {
    queue: function(data, node){
      var a;
      a = new TimelineLite({
        paused: true
      });
      if (data) {
        if (!Array.isArray(data)) {
          data = [data];
        }
        this.add(a, node, data);
      }
      return a;
    },
    add: function(timeline, node, source, position){
      var i$, len$, a, pos, b;
      position == null && (position = '+=0');
      if (!source) {
        return;
      }
      for (i$ = 0, len$ = source.length; i$ < len$; ++i$) {
        a = source[i$];
        switch (typeof a) {
        case 'object':
          if (a.disabled) {
            break;
          }
          if ('node' in a) {
            node = a.node;
          }
          pos = 'position' in a ? a.position : position;
          if (!node || ('length' in node && !node.length)) {
            break;
          }
          if ('w3ui' in node) {
            node = node.nodes;
          }
          if (a.label) {
            timeline.addLabel(a.label, pos);
            pos = a.label;
          }
          if (a.group) {
            b = a.func
              ? a.func()
              : a.group;
            if (!b) {
              break;
            }
            b = this.queue(b, node);
            if ('duration' in a) {
              b.duration = a.duration;
            }
            timeline.add(b.play(), pos);
            break;
          }
          if ('func' in a && a.func) {
            b = a.scope
              ? a.func.bind(a.scope)
              : a.func;
            timeline.add(b, pos);
            break;
          }
          if (!a.to && !a.from) {
            break;
          }
          b = [a.to ? w3ui.CLONE(a.to) : null, a.from ? w3ui.CLONE(a.from) : null];
          if (!a.duration || a.duration < 0.0001) {
            timeline.set(node, b[0] || b[1], pos);
            break;
          }
          if (b[0] && !b[1]) {
            timeline.to(node, a.duration, b[0], pos);
            break;
          }
          if (!b[0] && b[1]) {
            timeline.from(node, a.duration, b[1], pos);
            break;
          }
          timeline.fromTo(node, a.duration, b[0], b[1], pos);
          break;
        case 'function':
          if (a.length) {
            b = new Proxy(timeline, apiHandler);
            timeline.addPause('+=0', a, [b]);
            break;
          }
          timeline.add(a);
          break;
        case 'string':
          timeline.addLabel(a);
        }
      }
    },
    joinTimelines: function(list, queue){
      var a, i$, to$, b;
      queue == null && (queue = false);
      if (!list || !list.length) {
        return null;
      }
      if (list.length < 2) {
        return list[0];
      }
      a = list[0];
      for (i$ = 1, to$ = list.length - 1; i$ <= to$; ++i$) {
        b = i$;
        if (queue) {
          a.add(list[b].play());
        } else {
          a.add(list[b].play(), 0);
        }
      }
      return a;
    },
    pauseAll: function(timeline){
      do {
        timeline.pause();
      } while (timeline = timeline.timeline);
    },
    resumeAll: function(timeline){
      do {
        if (!timeline.isActive()) {
          timeline.resume();
        }
      } while (timeline = timeline.timeline);
    },
    removeAtLabel: function(timeline, label){
      var a, b, i$, len$, c;
      if ((a = timeline.getLabelTime(label)) === -1) {
        return;
      }
      b = timeline.getChildren(false, true, true, a);
      for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
        c = b[i$];
        if (c.startTime() === a) {
          console.log('found a tween to remove at [' + label + ']');
          timeline.remove(c);
        }
      }
    }
  };
  WIDGET = {
    store: {},
    construct: function(name){
      return function(selector, opts){
        var node, widget, ref$;
        if (!(name in WIDGET.store)) {
          console.log('w3ui: widget «' + name + '» is not loaded');
          return null;
        }
        if (!(node = QUERY(selector))) {
          console.log('w3ui: DOM query failed for «' + selector + '»');
          return null;
        }
        node['class'].add(['w3ui', 'widget', name]);
        widget = WIDGET.store[name];
        widget = (ref$ = clone$(widget), ref$.name = name, ref$.node = node, ref$.data = CLONE(widget.data), import$(ref$, WIDGET.base));
        if (!widget.create(opts)) {
          widget.log('failed to create');
          return null;
        }
        return widget.api;
      };
    },
    base: {
      options: function(){
        var base;
        base = {
          theme: 'DEFAULT',
          orientation: false,
          responsive: false,
          animate: true,
          log: true,
          disabled: false
        };
        return function(){
          this.options = import$(clone$(base), CLONE(this.__proto__.options));
        };
      }(),
      attach: function(){
        var attach, react, detach;
        attach = function(){
          var i$, ref$, len$, a, j$, ref1$, len1$, c, b, this$ = this;
          if (!this.attach.ready) {
            for (i$ = 0, len$ = (ref$ = this.data.events).length; i$ < len$; ++i$) {
              a = ref$[i$];
              a.node = !a.el
                ? this.node
                : typeof a.el === 'string'
                  ? QUERY(a.el, this.node)
                  : [a.el];
              a.handler = a.node.map(fn$);
            }
            this.attach.ready = true;
          }
          for (i$ = 0, len$ = (ref$ = this.data.events).length; i$ < len$; ++i$) {
            a = ref$[i$];
            for (j$ = 0, len1$ = (ref1$ = a.node).length; j$ < len1$; ++j$) {
              c = j$;
              b = ref1$[j$];
              b.addEventListener(a.event, a.handler[c]);
            }
          }
          this.detach = detach.bind(this);
          function fn$(el, index){
            var b, ref$;
            b = (ref$ = clone$(a), ref$.el = el, ref$.index = index, ref$);
            return react.bind(this$, b);
          }
        };
        react = function(data, event){
          if (this.__proto__.react.call(this, data, event)) {
            event.preventDefault();
          }
          return true;
        };
        detach = function(){
          var i$, ref$, len$, a, j$, ref1$, len1$, c, b;
          for (i$ = 0, len$ = (ref$ = this.data.events).length; i$ < len$; ++i$) {
            a = ref$[i$];
            for (j$ = 0, len1$ = (ref1$ = a.node).length; j$ < len1$; ++j$) {
              c = j$;
              b = ref1$[j$];
              b.removeEventListener(a.event, a.handler[c]);
            }
          }
        };
        return function(){
          this.attach = attach.bind(this);
        };
      }(),
      api: function(){
        var options;
        options = {
          set: function(obj, key, val){
            if (!(key in obj)) {
              this.log('unknown option «' + key + '»');
              return true;
            }
            if ((val = this.setup(key, val)) !== undefined) {
              obj[key] = val;
            }
            return true;
          },
          get: function(obj, key){
            if (!(key in obj)) {
              return null;
            }
            return CLONE(obj[key]);
          }
        };
        return function(){
          var api, a, ref$, b, this$ = this;
          api = {};
          for (a in ref$ = this.__proto__.api) {
            b = ref$[a];
            api[a] = typeof b === 'function' ? b.bind(this) : b;
          }
          api.w3ui = this;
          api.name = this.name;
          api.node = this.node;
          api.animation = this.animation.bind(this);
          api.attach = this.attach;
          api.detach = function(){
            if (this$.detach) {
              this$.detach();
            }
          };
          api.destroy = this.destroy.bind(this);
          api.resize = this.resize.bind(this);
          Object.defineProperty(api, 'options', {
            get: (function(a){
              return function(){
                return a;
              };
            }.call(this, PROXY(this.options, options, this))),
            set: function(opts){
              var a, b, i$, len$, c;
              if (toString$.call(opts).slice(8, -1) !== 'Object') {
                return;
              }
              a = Object.keys(opts);
              b = this$.options.ORDER
                ? this$.options.ORDER.slice()
                : [];
              for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
                c = a[i$];
                if (!b.includes(c)) {
                  b.push(c);
                }
              }
              for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
                a = b[i$];
                this$.api.options[a] = opts[a];
              }
            }
          });
          this.api = api;
        };
      }(),
      create: function(options){
        var a, this$ = this;
        this.options();
        this.attach();
        this.api();
        if ('INIT' in this.data) {
          this.data.INIT.forEach(function(a){
            this$[a]();
          });
        }
        this.api.options = options;
        this.node['class'].add(this.options.theme);
        if ((a = this.__proto__.create) && !a.call(this)) {
          return false;
        }
        if (this.options.responsive) {
          window.addEventListener('resize', this.api.resize);
        }
        return true;
      },
      destroy: function(){
        var a, this$ = this;
        this.node['class'].remove(['w3ui', this.name]);
        if (this.detach) {
          this.detach();
        }
        if (this.options.responsive) {
          window.removeEventListener('resize', this.api.resize);
        }
        if ('INIT' in this.data) {
          this.data.INIT.forEach(function(a){
            this$[a].destroy();
          });
        }
        (a = this.__proto__.destroy) && a.call(this);
      },
      resize: function(){
        var a;
        (a = this.__proto__.resize) && a.call(this);
      },
      setup: function(key, val){
        var a;
        if (!(a = this.__proto__.setup)) {
          return val;
        }
        switch (key) {
        case 'responsive':
          return this.options[key];
        }
        return a.call(this, key, val);
      },
      log: function(msg){
        if (this.options.log) {
          console.log('w3ui.' + this.name + ': ' + msg);
        }
      }
    }
  };
  QUERY = function(){
    var api, apiProxy, apiBind, wrapNode, getNodes;
    api = {
      w3ui: {
        _property: true,
        get: function(){
          return this;
        }
      },
      query: {
        _func: function(selector, noWrap){
          noWrap == null && (noWrap = false);
          if (this.selector) {
            selector = this.selector + ' ' + selector;
          }
          return QUERY(selector, this.node, noWrap);
        }
      },
      node: {
        _property: true,
        get: function(){
          return this.node;
        }
      },
      nodes: {
        _property: true,
        get: function(){
          return this.nodes;
        }
      },
      clone: {
        _func: function(deep){
          deep == null && (deep = true);
          return this.node.cloneNode(deep);
        }
      },
      html: {
        _property: true,
        get: function(){
          return this.node.innerHTML;
        },
        set: function(val){
          this.node.innerHTML = val;
        }
      },
      style: {
        _proxy: true,
        get: function(data, key){
          var s, a;
          s = data.group
            ? data.style[0]
            : data.style;
          a = s[key];
          if (a === undefined) {
            a = key.replace(/([A-Z])/g, function(a){
              return '-' + a[0].toLowerCase();
            });
            a = s.getPropertyValue('--' + a);
          }
          if (typeof a === 'string') {
            a = a.trim();
            if (a.length > 2 && a.substr(-2) === 'px') {
              a = parseFloat(a);
              if (isNaN(a)) {
                a = 0;
              }
            } else if (a === '0') {
              a = 0;
            }
          }
          return a;
        },
        set: function(data, key, val){
          var s, a;
          s = data.group
            ? data.style[0]
            : data.style;
          if (s[key] === undefined) {
            a = key.replace(/([A-Z])/g, function(a){
              return '-' + a[0].toLowerCase();
            });
            data.node.style.setProperty('--' + a, val);
          } else {
            data.node.style[key] = val;
          }
          return true;
        }
      },
      box: {
        state: function(){
          var x, a, b, ref$, c;
          x = {};
          a = this.api.box;
          for (b in ref$ = api.box) {
            c = ref$[b];
            if (!c.length && b !== 'state') {
              x[b] = a[b];
            }
          }
          return x;
        },
        innerWidth: function(){
          var a;
          a = this.api.style;
          return this.node.clientWidth - (a.paddingLeft + a.paddingRight);
        },
        innerHeight: function(){
          var a;
          a = this.api.style;
          return this.node.clientHeight - (a.paddingTop + a.paddingBottom);
        },
        width: function(){
          return this.node.clientWidth;
        },
        height: function(){
          return this.node.clientHeight;
        },
        outterWidth: function(){
          var a;
          a = this.api.style;
          return this.node.clientWidth + (a.borderLeftWidth + a.borderRightWidth) + (a.marginLeft + a.marginRight);
        },
        outterHeight: function(){
          var a;
          a = this.api.style;
          return this.node.clientHeight + (a.borderTopWidth + a.borderBottomWidth) + (a.marginTop + a.marginBottom);
        },
        paddingWidth: function(){
          var a;
          a = this.api.style;
          return a.paddingLeft + a.paddingRight;
        },
        paddingHeight: function(){
          var a;
          a = this.api.style;
          return a.paddingTop + a.paddingBottom;
        },
        borderWidth: function(){
          var a;
          a = this.api.style;
          return a.borderLeftWidth + a.borderRightWidth;
        },
        borderHeight: function(){
          var a;
          a = this.api.style;
          return a.borderTopWidth + a.borderBottomWidth;
        },
        textMetrics: function(text, fontSize){
          var a, b, c;
          fontSize == null && (fontSize = 0);
          a = this.api.style;
          b = DEP.context2d;
          c = fontSize
            ? fontSize
            : a.fontSize;
          c = [a.fontStyle, a.fontWeight, c + 'px', a.fontFamily];
          b.font = c.join(' ');
          return b.measureText(text);
        },
        fontSize: function(text){
          var api, a, b, c, d;
          if (!text || !typeof text === 'string') {
            return 0;
          }
          api = this.api.box;
          a = api.innerHeight;
          b = api.innerWidth;
          c = [0, a];
          while (c[1] - c[0] > 0.5) {
            if (!(d = api.textMetrics(text, a))) {
              return 0;
            }
            if (d.width <= b) {
              c[0] = a;
            } else {
              c[1] = a;
            }
            a = c[0] + (c[1] - c[0]) / 2.0;
          }
          return c[0];
        }
      },
      'class': {
        _property: true,
        _proxy: true,
        set: function(val){
          if (typeof val === 'string') {
            this.node.className = val;
          }
        },
        has: function(name){
          return this.node.classList.contains(name);
        },
        add: function(name){
          var this$ = this;
          if (typeof name === 'string') {
            this.node.classList.add(name);
            return;
          }
          name.forEach && name.forEach(function(a){
            this$.node.classList.add(a);
          });
        },
        remove: function(name){
          var this$ = this;
          if (!name) {
            this.api['class'].clear();
          } else if (typeof name === 'string') {
            this.node.classList.remove(name);
          } else {
            name.forEach && name.forEach(function(name){
              this$.node.classList.remove(name);
            });
          }
        },
        clear: function(except){
          var a, b, c;
          except == null && (except = '');
          a = this.node.classList;
          b = a.length;
          if (!except) {
            while (--b >= 0) {
              a.remove(a.item(b));
            }
          } else {
            except += ' ';
            while (--b >= 0) {
              c = a.item(b);
              if (!except.includes(c + ' ')) {
                a.remove(c);
              }
            }
          }
        },
        replace: function(name0, name1){
          return this.node.classList.replace(name0, name1);
        },
        toggle: function(name, flag){
          if (typeof flag === 'function') {
            flag = flag(this.wrap, this.index);
          }
          return this.node.classList.toggle(name, !!flag);
        }
      },
      classAdd: {
        _group: true,
        _func: function(name){
          this.group.forEach(function(node){
            node['class'].add(name);
          });
        }
      },
      classRemove: {
        _group: true,
        _func: function(name){
          this.group.forEach(function(node){
            node['class'].remove(name);
          });
        }
      },
      classToggle: {
        _group: true,
        _func: function(name, flag){
          this.group.forEach(function(node){
            node['class'].toggle(name, flag);
          });
        }
      },
      prop: {
        _proxy: true,
        get: function(data, key){
          key = key.replace(/([A-Z])/g, function(a){
            return '-' + a[0].toLowerCase();
          });
          return data.node.getAttribute(key);
        },
        set: function(data, key, val){
          key = key.replace(/([A-Z])/g, function(a){
            return '-' + a[0].toLowerCase();
          });
          if (val === null) {
            data.node.removeAttribute(key);
            return true;
          }
          data.node.setAttribute(key, val);
          return true;
        },
        has: function(data, key){
          return data.node.hasAttribute(key);
        }
      },
      props: {
        _proxy: true,
        _group: true,
        get: function(data, key){
          return data.group.map(function(node){
            return node.prop[key];
          });
        },
        set: function(data, key, val){
          data.group.forEach(function(node){
            node.prop[key] = val;
          });
          return true;
        },
        has: function(data, key){
          return data.nodes.some(function(node){
            return node.hasAttribute(name);
          });
        }
      },
      child: {
        add: function(node, parent){
          parent == null && (parent = this.node);
          if ('w3ui' in node) {
            api.child.add(node.nodes, parent);
          } else if (toString$.call(node).slice(8, -1) === 'Array') {
            node.forEach(function(node){
              parent.appendChild(node);
            });
          } else {
            parent.appendChild(node);
          }
        },
        insert: function(node, index, parent){
          var a;
          index == null && (index = 0);
          parent == null && (parent = this.node);
          if (parent.children.length === 0) {
            api.child.add(node, parent);
            return;
          }
          if (index < 0) {
            index = 0;
          } else if (index > (a = parent.children.length - 1)) {
            index = a;
          }
          a = parent.children[index];
          if ('w3ui' in node) {
            node = node.w3ui.group
              ? node.nodes
              : node.node;
            api.child.insert(node, index, parent);
            return;
          }
          if (toString$.call(node).slice(8, -1) === 'Array') {
            node.forEach(function(node){
              parent.insertBefore(node, a);
            });
          } else {
            parent.insertBefore(node, a);
          }
        },
        remove: function(node, parent){
          var a;
          node == null && (node = null);
          parent == null && (parent = this.node);
          if (!node) {
            a = document.createRange();
            a.selectNodeContents(parent);
            a.deleteContents();
            return;
          }
          if ('w3ui' in node) {
            node = node.w3ui.group
              ? node.nodes
              : node.node;
            api.child.remove(node, parent);
            return;
          }
          if (toString$.call(node).slice(8, -1) === 'Array') {
            return node.forEach(function(node){
              parent.removeChild(node);
            });
          } else {
            return parent.removeChild(node);
          }
        }
      },
      addEventListener: {
        _property: true,
        get: function(){
          return this.node.addEventListener.bind(this.node);
        }
      },
      removeEventListener: {
        _property: true,
        get: function(){
          return this.node.removeEventListener.bind(this.node);
        }
      }
    };
    apiProxy = {
      get: function(arg$, key){
        var data, api;
        data = arg$[0], api = arg$[1];
        if (!isNaN(parseInt(key)) || !(api = api[key])) {
          return null;
        }
        return api.length > 0
          ? api.bind(data)
          : api.call(data);
      },
      set: function(arg$, key, val){
        var data, api;
        data = arg$[0], api = arg$[1];
        if ('set' in api) {
          api.set.call(data, key, val);
        }
        return true;
      }
    };
    apiBind = function(data, target){
      var b, ref$, a, c;
      target == null && (target = {});
      for (b in ref$ = api) {
        a = ref$[b];
        if (a._group && !data.group) {
          continue;
        }
        if (a._func) {
          a = {
            value: a._func.bind(data)
          };
        } else if (a._property) {
          c = {};
          if (a._proxy) {
            c.get = (fn$.call(this, new Proxy([data, a], apiProxy)));
          } else if ('get' in a) {
            c.get = a.get.bind(data);
          }
          if (a.set) {
            c.set = a.set.bind(data);
          }
          a = c;
        } else if (a._proxy) {
          a = {
            value: new Proxy(data, a)
          };
        } else {
          a = {
            value: new Proxy([data, a], apiProxy)
          };
        }
        Object.defineProperty(target, b, a);
      }
      return target;
      function fn$(a){
        return function(){
          return a;
        };
      }
    };
    wrapNode = function(node, boundApi){
      return new Proxy(node, {
        get: function(node, key){
          return key in api
            ? boundApi[key]
            : Reflect.get(node, key);
        },
        set: function(node, key, val){
          if (key in api) {
            boundApi[key] = val;
            return true;
          }
          return Reflect.set(node, key, val);
        },
        has: function(node, key){
          return key in api
            ? true
            : Reflect.has(node, key);
        }
      });
    };
    getNodes = function(selector, parent){
      var node, i$, ref$, len$, a;
      node = [];
      switch (toString$.call(selector).slice(8, -1)) {
      case 'String':
        if ('w3ui' in parent) {
          for (i$ = 0, len$ = (ref$ = parent.w3ui.nodes).length; i$ < len$; ++i$) {
            a = ref$[i$];
            node = node.concat(getNodes(selector, a));
          }
          break;
        }
        if (selector) {
          if (!(a = parent.querySelectorAll(selector)).length) {
            if (parent.matches(selector)) {
              node.push(parent);
              break;
            }
          }
        } else {
          a = parent.children;
        }
        a = Array.from(a);
        break;
      case 'Array':
        for (i$ = 0, len$ = selector.length; i$ < len$; ++i$) {
          a = selector[i$];
          if (a) {
            node = node.concat(getNodes(a, parent));
          }
        }
        break;
      default:
        if ('w3ui' in selector) {
          return selector.nodes;
        }
        node.push(selector);
      }
      return node;
    };
    return function(selector, parent, noWrap){
      var node, style, data;
      parent == null && (parent = document);
      noWrap == null && (noWrap = false);
      node = getNodes(selector, parent);
      if (!node.length) {
        return null;
      }
      if (noWrap) {
        return node;
      }
      style = node.map(function(el){
        return window.getComputedStyle(el);
      });
      data = {
        group: true,
        selector: selector,
        nodes: node,
        node: node[0],
        index: 0,
        parent: parent,
        style: style
      };
      node = node.map(function(el, index){
        var a;
        a = Object.create(data);
        a.group = null;
        a.nodes = [el];
        a.node = el;
        a.index = index;
        a.style = style[index];
        a.api = apiBind(a);
        a.wrap = wrapNode(el, a.api);
        return a;
      });
      data.api = node[0].api;
      data.wrap = node[0].wrap;
      data.group = apiBind(data, node.map(function(el){
        return el.wrap;
      }));
      return data.group;
    };
  }();
  APP = function(){
    var MODEL, VIEW, PRESENTER;
    MODEL = {
      data: {
        nav: [
          {
            id: ''
          }, {
            id: ''
          }, {
            id: ''
          }, {
            id: ''
          }, {
            id: ''
          }
        ],
        navHistory: [{}, {}, {}, {}],
        navDefault: null,
        navPath: function(){
          return this.nav.map(function(a){
            return a.id;
          });
        }
      },
      proxy: {
        init: function(obj){
          var a;
          a = obj.nav;
          obj.navHistory.forEach(function(save, level){
            save[''] = w3ui.CLONE(a.slice(level + 1));
          });
          obj.navDefault && obj.navDefault.forEach(function(id, level){
            obj.nav[level].id = id;
          });
          return obj;
        },
        set: function(obj, k, v, prx){
          var a, nav, sav, i$, to$, b, len$, c;
          a = parseInt(k);
          if (isNaN(a)) {
            obj[k] = v;
            return true;
          }
          k = a;
          nav = obj.nav;
          a = nav[k];
          sav = k < obj.navHistory.length ? obj.navHistory[k] : null;
          if (a.id === v && v === '') {
            return true;
          }
          if (a.id === v) {
            v = '';
          }
          if (sav) {
            k++;
            sav[a.id] = w3ui.CLONE(nav.slice(k));
            for (i$ = k, to$ = nav.length - 1; i$ <= to$; ++i$) {
              b = i$;
              w3ui.clearObject(nav[b]);
            }
            sav = sav[v]
              ? sav[v]
              : sav[''];
            for (i$ = 0, len$ = sav.length; i$ < len$; ++i$) {
              c = i$;
              b = sav[i$];
              import$(nav[k + c], sav[c]);
            }
          }
          a.id = v;
          return true;
        },
        get: function(obj, p, prx){
          var k;
          k = parseInt(p);
          if (!isNaN(k)) {
            return obj.nav[k].id;
          }
          if (!(p in obj)) {
            return null;
          }
          k = obj[p];
          if (typeof k === 'function' && k.length === 0) {
            return k();
          }
          return obj[p];
        }
      }
    };
    VIEW = {
      init: function(){
        var M, V, P, initNode, initAnimation;
        M = null;
        V = null;
        P = null;
        initNode = function(id, node, parent, level, tid){
          var cfg, a, b, own$ = {}.hasOwnProperty;
          cfg = node.cfg;
          if (level > 0) {
            tid = tid + '-' + id;
          }
          cfg.id = id;
          cfg.parent = parent;
          cfg.level = level;
          cfg.nav = M.nav[level];
          if (cfg.render !== undefined) {
            cfg.render = V.render.bind(node, cfg.render);
          }
          if (cfg.attach) {
            cfg.attach = V.attach.bind(node, P, cfg.attach);
          }
          cfg.template = V.template.querySelector(tid);
          cfg.data = {};
          cfg.el = V.el;
          cfg.show && initAnimation(node, cfg.show);
          cfg.hide && initAnimation(node, cfg.hide);
          if (cfg.turn) {
            if (cfg.turn.on) {
              initAnimation(node, cfg.turn.off);
              initAnimation(node, cfg.turn.on);
            } else {
              initAnimation(node, cfg.turn);
            }
          }
          for (a in node) if (own$.call(node, a)) {
            b = node[a];
            if (a !== 'cfg' && b && b.cfg) {
              this.init(a, b, node, level + 1, tid);
            }
          }
          return true;
        };
        initAnimation = function(node, queue){
          var i$, len$, b, a;
          for (i$ = 0, len$ = queue.length; i$ < len$; ++i$) {
            b = i$;
            a = queue[i$];
            if (typeof a === 'function') {
              queue[b] = a.bind(node);
              continue;
            }
            if (a.func) {
              queue[b].func = a.func.bind(node);
              continue;
            }
            if (a.group) {
              initAnimation(node, a.group);
            }
          }
        };
        return function(){
          M = arguments[0]; V = arguments[1]; P = arguments[2];
          V.template = document.querySelector('template').content;
          V.init = initNode.bind(V);
          V.el = V.el(M, V);
          V.call = V.call(M);
          if (!V.init('ui', V.ui, null, 0, '#t')) {
            console.log('w3ui.app: failed to initialize view');
            return false;
          }
          return true;
        };
      }(),
      render: function(template, old){
        var id, a, b, c, d;
        old == null && (old = '');
        id = this.cfg.nav.id;
        if (!this.cfg.node) {
          this.cfg.node = w3ui('#' + this.cfg.id);
        }
        a = this.cfg.parent;
        b = !a || a.cfg.nav.id === this.cfg.id ? id : '';
        if (!b && id && (c = a[a.cfg.nav.id][id])) {
          this.cfg.context = c;
        }
        if (!template || !id) {
          return true;
        }
        if (!this.cfg.node) {
          return false;
        }
        if (b) {
          a = this[id].cfg.template.innerHTML;
          c = this[id];
        } else {
          a = (a = this.cfg.template.querySelector('#' + id)) ? a.innerHTML : '';
          c = this[id] ? this[id].render.call(this) : null;
        }
        if (!(a = Mustache.render(a, c))) {
          return true;
        }
        d = document.createElement('template');
        d.innerHTML = a.trim();
        c = w3ui('', d.content);
        if (b) {
          this[id].cfg.node = w3ui('#' + b, c);
        } else {
          this[id].node = c;
        }
        if (old) {
          c.style.display = 'none';
          this.cfg.node.child.insert(c, 0);
        } else {
          this.cfg.node.child.remove();
          this.cfg.node.child.add(c);
        }
        return true;
      },
      attach: function(P, event){
        var a, b, c, d, i$, len$, ref$, this$ = this;
        if (event === true) {
          if (!(a = this.cfg.nav.id) || !(b = this[a])) {
            return true;
          }
          event = b.attach;
        }
        if (toString$.call(event).slice(8, -1) !== 'Array' || !event.length) {
          return true;
        }
        c = [];
        d = [];
        for (i$ = 0, len$ = event.length; i$ < len$; ++i$) {
          a = event[i$];
          if (typeof a === 'function') {
            d.push(a.call(this));
            continue;
          }
          b = !a.el
            ? [this.cfg.node]
            : typeof a.el === 'string'
              ? QUERY(a.el, this.cfg.node, true)
              : a.el.length
                ? a.el
                : [a.el];
          if (!('preventDefault' in a)) {
            a.preventDefault = !/^key.+/.test(a.event);
          }
          if (!('handler' in a)) {
            a.handler = P.event.bind(this, a);
          }
          c.push([a, b]);
        }
        this.cfg.detach = function(){
          var i$, ref$, len$, ref1$, a, b;
          for (i$ = 0, len$ = (ref$ = c).length; i$ < len$; ++i$) {
            ref1$ = ref$[i$], a = ref1$[0], b = ref1$[1];
            b.forEach(fn$);
          }
          for (i$ = 0, len$ = (ref$ = d).length; i$ < len$; ++i$) {
            a = ref$[i$];
            a.detach();
          }
          delete this$.detach;
          return true;
          function fn$(b){
            b.removeEventListener(a.event, a.handler);
          }
        };
        this.cfg.detach.data = {};
        for (i$ = 0, len$ = c.length; i$ < len$; ++i$) {
          ref$ = c[i$], a = ref$[0], b = ref$[1];
          b.forEach(fn$);
        }
        for (i$ = 0, len$ = d.length; i$ < len$; ++i$) {
          a = d[i$];
          a.attach();
        }
        return true;
        function fn$(b){
          b.addEventListener(a.event, a.handler);
        }
      },
      el: function(M, V){
        return PROXY(V.ui, {
          get: function(obj, id, prx){
            var root, a, b, k, v, own$ = {}.hasOwnProperty;
            if (obj.cfg.id === id) {
              return obj;
            }
            if (!(root = M[0])) {
              return null;
            }
            if (!(obj = obj[root])) {
              return null;
            }
            if (!id || obj.cfg.id === id) {
              return obj;
            }
            if (obj[id] && obj[id].cfg) {
              return obj[id];
            }
            a = [obj];
            while (a.length) {
              b = a.pop();
              for (k in b) if (own$.call(b, k)) {
                v = b[k];
                if (k !== 'cfg' && v && v.cfg) {
                  if (v[id] && v[id].cfg) {
                    return v[id];
                  }
                  a.push(v);
                }
              }
            }
            return null;
          }
        });
      },
      list: function(id){
        var x, a, b;
        x = [];
        if (!(a = this.el[id])) {
          return x;
        }
        b = [a];
        while (b.length) {
          x.push(b);
          b = b.map(fn$);
          b = b.reduce(fn1$, []);
        }
        x = x.reduce(function(a, b){
          return a.concat(b);
        }, []);
        return x;
        function fn$(node){
          var c, a, b;
          c = [];
          for (a in node) {
            b = node[a];
            if (a !== 'cfg' && b && b.cfg) {
              c.push(b);
            }
          }
          return c;
        }
        function fn1$(a, b){
          return a.concat(b);
        }
      },
      callMethods: {
        render: {
          active: false,
          followPath: true
        },
        init: {
          active: true,
          cleanup: true
        },
        resize: {
          active: true,
          followPath: true
        },
        refresh: {
          active: true,
          followPath: true
        },
        attach: {
          active: true,
          followPath: true
        },
        detach: {
          active: true,
          reverse: true
        },
        finit: {
          active: false,
          reverse: true
        }
      },
      call: function(M){
        return function(method, id){
          var param, res$, i$, to$, opts, list, this$ = this;
          id == null && (id = '');
          res$ = [];
          for (i$ = 2, to$ = arguments.length; i$ < to$; ++i$) {
            res$.push(arguments[i$]);
          }
          param = res$;
          if (!param.length) {
            param = false;
          }
          if (!(opts = this.callMethods[method])) {
            return false;
          }
          if (!(list = this.list(id))) {
            return false;
          }
          if (opts.cleanup) {
            list.forEach(function(node){
              var a, b;
              a = node.cfg;
              if (!a.node) {
                return;
              }
              b = a.context ? a.context.cfg : a;
              if (b.parent.cfg.nav.id === b.id) {
                return;
              }
              a.node = null;
            });
          }
          list = list.reduce(function(a, node){
            var b;
            if (!(method in node.cfg)) {
              return a;
            }
            if (opts.followPath && node.cfg.parent) {
              b = node;
              while (b.cfg.parent && b.cfg.parent.cfg.id !== 'ui') {
                b = b.cfg.parent;
              }
              if (b.cfg.id !== M[0]) {
                return a;
              }
            }
            if (opts.active && !node.cfg.node) {
              return a;
            }
            a.push(node);
            return a;
          }, []);
          if (!list.length) {
            return true;
          }
          if (opts.reverse) {
            list.reverse();
          }
          return list.every(function(node){
            var a;
            a = param
              ? node.cfg[method].apply(node, param)
              : node.cfg[method].call(node);
            if (!a) {
              this$.log(method + ' failed', node);
            }
            return a;
          });
        };
      },
      hide: function(id, onComplete){
        var list, a, b;
        if (!id || !(list = this.list(id)) || !list.length) {
          onComplete();
          return;
        }
        list = list.slice(1);
        list.reverse();
        a = new TimelineLite({
          paused: true
        });
        b = '';
        list.forEach(function(node){
          var c;
          if (!(node = this.cfg.node)) {
            return;
          }
          c = new TimelineLite({
            paused: true
          });
          GSAP.add(c, node, this.cfg.hide);
          if (!b || b !== 'L' + this.cfg.level) {
            b = 'L' + this.cfg.level;
            a.addLabel(b);
          }
          a.add(c.play(), b);
        });
        a.add(onComplete);
        a.play();
      },
      show: function(id1, id0, onComplete){
        var x, node, parent, c, list, a, b;
        x = new TimelineLite({
          paused: true
        });
        x.addLabel('turn');
        node = this.el[id1].cfg;
        parent = node.parent;
        if (id0 && (c = parent.cfg.parent)) {
          list = [parent];
          for (a in c) {
            b = c[a];
            if (a !== 'cfg' && b.cfg) {
              if (!b.cfg.node || a === parent.cfg.id) {
                continue;
              }
              list.push(b);
            }
          }
          list.forEach(function(parent){
            var el0, el1, turn, flag, a, old;
            el0 = parent[id0];
            el1 = parent[id1];
            turn = parent.cfg.turn;
            flag = !!parent.cfg.context;
            if (flag && (!el0 || !el0.render) && (!el1 || !el1.render)) {
              if (turn) {
                a = new TimelineLite({
                  paused: true
                });
                GSAP.add(a, parent.cfg.node, turn);
                x.add(a.play(), 'turn');
              }
              return;
            }
            if (flag) {
              if (el0) {
                old = el0.node;
              }
            } else {
              el0 = el0.cfg;
              el1 = el1.cfg;
              old = parent.cfg.node.query('#' + id0, 0, true)[0];
            }
            if (!turn) {
              old && x.add(function(){
                parent.cfg.node.child.remove(old);
                if (el0.node) {
                  delete el0.node;
                }
              });
              return;
            }
            turn = {
              on: el1 && el1.turn
                ? el1.turn.on
                : turn.on,
              off: el0 && el0.turn
                ? el0.turn.off
                : turn.off
            };
            if (el1) {
              a = new TimelineLite({
                paused: true
              });
              if (!old && parent.cfg.show) {
                GSAP.add(a, parent.cfg.node, parent.cfg.show);
              }
              !flag && x.add(function(){
                el1.node.style.display = null;
              }, 'turn');
              GSAP.add(a, el1.node, turn.on);
              x.add(a.play(), 'turn');
            }
            if (old) {
              a = new TimelineLite({
                paused: true
              });
              GSAP.add(a, old, turn.off);
              if (!el1 && parent.cfg.hide) {
                GSAP.add(a, parent.cfg.node, parent.cfg.hide);
              }
              x.add(a.play(), 'turn');
              x.add(function(){
                parent.cfg.node.child.remove(old);
                delete el0.node;
              });
            }
          });
        }
        list = this.list(id1);
        if (id0) {
          list = list.slice(1);
        }
        list = list.reduce(function(a, b){
          if (b.cfg.node) {
            a.push(b);
          }
          return a;
        }, []);
        a = '';
        list.forEach(function(elem){
          var b, c;
          b = elem.cfg;
          c = new TimelineLite({
            paused: true
          });
          c.add(function(){
            var c;
            if (b.context) {
              c = elem[b.nav.id];
              if (c) {
                c.node.style.display = null;
              }
            } else {
              b.node.style.display = null;
            }
          });
          GSAP.add(c, b.node, b.show);
          if (!a || a !== 'L' + b.level) {
            a = 'L' + b.level;
            c.addLabel(a);
          }
          x.add(c.play(), a);
        });
        x.add(onComplete);
        x.play();
      },
      log: function(msg, node){
        var a;
        a = [];
        while (node) {
          a.push(node.cfg.id);
          node = node.cfg.parent;
        }
        if (a.length) {
          msg = '«' + a.reverse().join('.') + '» ' + msg;
        }
        console.log('w3ui.app: ' + msg);
      }
    };
    PRESENTER = {
      init: function(M, V, P){
        var name, ref$, method;
        for (name in ref$ = PRESENTER) {
          method = ref$[name];
          if (typeof method === 'function' && name !== 'init') {
            P[name] = method(M, V, P);
          }
        }
        P.update(function(){
          window.addEventListener('resize', P.resize.bind(P));
          return true;
        });
        return true;
      },
      update: function(M, V, P){
        var busy, lock, nav, id0, id1, level, rid, cancelThread, thread;
        busy = false;
        lock = false;
        nav = null;
        id0 = '';
        id1 = '';
        level = 0;
        rid = '';
        cancelThread = function(msg){
          if (msg) {
            console.log(msg);
          }
          lock = false;
          busy = false;
          return null;
        };
        thread = [
          function(){
            return !busy;
          }, function(){
            var i$, ref$, len$, b, a;
            busy = true;
            if (nav) {
              for (i$ = 0, len$ = (ref$ = nav).length; i$ < len$; ++i$) {
                b = i$;
                a = ref$[i$];
                if (a !== M[b]) {
                  id0 = a;
                  id1 = M[b];
                  level = b;
                  break;
                }
              }
            } else {
              id1 = M[0];
            }
            if (id0 === id1) {
              return cancelThread();
            }
            if (!(a = V.el[id1])) {
              M[level] = id0;
              return cancelThread('"' + id1 + '" not found');
            }
            b = a.cfg.level - 2;
            if (b < 0) {
              b = 0;
            }
            while (a.cfg.level > b) {
              a = a.cfg.parent;
            }
            rid = a.cfg.id;
            if (!V.call('detach')) {
              return cancelThread('detach failed');
            }
            if (id0) {
              lock = true;
              V.hide(id0, function(){
                lock = false;
              });
            }
            if (!V.call('finit', id1)) {
              return cancelThread('finit failed');
            }
            return true;
          }, function(){
            return !lock;
          }, function(){
            if (!V.call('render', rid, id0)) {
              return cancelThread('render failed');
            }
            if (!V.call('init')) {
              return cancelThread('init failed');
            }
            lock = true;
            V.show(id1, id0, function(){
              lock = false;
            });
            return true;
          }, function(){
            return !lock;
          }, function(){
            ['resize', 'refresh', 'attach'].forEach(function(a){
              return V.call(a);
            });
            nav = M.nav.map(function(a){
              return a.id;
            });
            busy = false;
            return true;
          }
        ];
        return function(onComplete){
          THREAD(onComplete ? thread.concat(onComplete) : thread);
        };
      },
      refresh: function(M, V, P){
        return function(id){
          id == null && (id = M[0]);
          V.call('refresh', id);
          V.call('detach', id);
          V.call('attach', id);
          delete P.event.busy;
        };
      },
      resize: function(M, V, P){
        return function(force){
          var me;
          me = P.resize;
          if (!force && me.timer) {
            window.clearTimeout(me.timer);
            me.timer = window.setTimeout(me.bind(P), 250);
            return;
          }
          if (!V.call('resize')) {
            console.log('w3ui.app: resize failed');
          }
        };
      },
      event: function(M, V, P){
        return function(conf, event){
          var me, cfg, dat, a;
          me = P.event;
          cfg = this.cfg;
          if (conf.preventDefault) {
            event.preventDefault();
          }
          if (!cfg.detach || !(dat = cfg.detach.data)) {
            return true;
          }
          if (me.busy) {
            if (!conf.delayed) {
              return true;
            }
            event.stopPropagation();
            a = !!me.delayed;
            me.delayed = me.bind(this, conf, event);
            if (a) {
              return false;
            }
            if (typeof me.busy === 'object') {
              me.busy.timeScale(2);
            }
            w3ui.THREAD([function(){
              if (me.busy) {
                return false;
              }
              me.delayed();
              delete me.delayed;
              return true;
            }]);
            return false;
          }
          event.conf = conf;
          event.data = dat;
          me.busy = P.react.call(this, M, V, P, event);
          return true;
        };
      }
    };
    return function(mvp){
      var M, V, P;
      if (!('M' in mvp) || !('V' in mvp) || !('P' in mvp)) {
        console.log('w3ui.app: incorrect parameter');
        return false;
      }
      M = PROXY(CLONE(import$(MODEL.data, mvp.M)), MODEL.proxy);
      V = import$(clone$(VIEW), mvp.V);
      P = import$(clone$(PRESENTER), mvp.P);
      document.addEventListener('DOMContentLoaded', function(){
        if (!V.init(M, V, P)) {
          console.log('w3ui.app: failed to initialize view');
          return;
        }
        if (!P.init(M, V, P)) {
          console.log('w3ui.app: failed to initialize presenter');
          return;
        }
      });
      return true;
    };
  }();
  DEP = {
    CLONE: CLONE,
    PROXY: PROXY,
    THREAD: THREAD,
    STATE: STATE,
    GSAP: GSAP,
    APP: APP,
    clearObject: function(obj){
      var k, own$ = {}.hasOwnProperty;
      for (k in obj) if (own$.call(obj, k)) {
        delete obj[k];
      }
    },
    context2d: function(){
      return document.createElement('canvas').getContext('2d');
    }()
  };
  return new Proxy(QUERY, {
    set: function(obj, key, val){
      if (key in WIDGET.store) {
        console.log('w3ui: widget «' + key + '» already exist, check your code');
        return true;
      }
      WIDGET.store[key] = val;
      return true;
    },
    get: function(obj, key){
      if (key in DEP) {
        return DEP[key];
      }
      return WIDGET.construct(key);
    }
  });
}();
function clone$(it){
  function fun(){} fun.prototype = it;
  return new fun;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}