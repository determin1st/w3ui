// Generated by LiveScript 1.6.0
"use strict";
window.addEventListener('load', async function(){
  var isLocal, server, a;
  window.w3ui = (await (await import('../modules/w3ui.js'))['default']);
  (await w3ui.httpFetch);
  isLocal = window.location.href.indexOf('local') !== -1;
  server = isLocal ? 'http://localhost' : 'http://46.4.19.13:30980';
  window.soFetch = httpFetch.create({
    baseUrl: server + '/api/http-fetch',
    timeout: 0
  });
  if (!isLocal) {
    console.log('httpFetch: remote version is ' + (await soFetch('')));
    if ((await soFetch('/tests')) !== true) {
      window.soFetch = null;
      console.log('httpFetch: test interface is disabled');
      return;
    }
  }
  if (!window.test) {
    w3ui.log('test() function is not defined');
    return;
  }
  window.assert = function(title, expect){
    title = '%c' + title;
    return function(res){
      var font;
      if (res instanceof Error) {
        if (res.hasOwnProperty('id')) {
          res = 'FetchError(' + res.id + ')[' + res.status + ']: %c' + res.message + ' ';
        } else {
          res = 'Error: %c' + res.message;
        }
        expect = !expect;
      } else {
        res = 'success(%c' + res + ')';
      }
      expect = expect ? 'color:green' : 'color:red';
      font = 'font-weight:bold;';
      console.log(title + '%c' + res, font, font + expect, expect);
    };
  };
  window.help = {
    base64ToBuf: function(str){
      var a, b, c, d;
      a = atob(str);
      b = a.length;
      c = new Uint8Array(b);
      d = -1;
      while (++d < b) {
        c[d] = a.charCodeAt(d);
      }
      return c;
    },
    bufToHex: function(){
      var hex, i, n;
      hex = [];
      i = -1;
      n = 256;
      while (++i < n) {
        hex[i] = i.toString(16).padStart(2, '0');
      }
      return function(buf){
        var a, b, i, n;
        a = new Uint8Array(buf);
        b = [];
        i = -1;
        n = a.length;
        while (++i < n) {
          b[i] = hex[a[i]];
        }
        return b.join('');
      };
    }()
  };
  window.sleep = function(time){
    var done;
    done = null;
    setTimeout(function(){
      done();
    }, time);
    return new Promise(function(resolve){
      done = resolve;
    });
  };
  if (a = document.querySelector('code.javascript')) {
    a.innerHTML = test.toString();
  }
  hljs.initHighlighting();
  test();
});